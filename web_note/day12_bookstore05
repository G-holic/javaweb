1. CommonResult工具的封装
    目的：为了方便团队开发(统一的数据格式,有利于团队成员之间的协助，提高开发效率)
    异步请求返回的数据，格式不统一(普通的字符串可以，返回json字符串也可以)
    工具：自己团队封装的，以后你的公司使用什么工具是不确定的
2. 工具的使用
    ① 前端发送异步请求到Servlet
    ② Servlet给响应数据的时候，将所有数据都封装到CommonResult对象内
        案例：
            CommonResult ok = CommonResult.ok().setResultData(new Employee(101, "暗卷", 0, 50000.0));
            //ok内就携带flag的值和resultData的值
            String s = new Gson().toJson(ok);
            System.out.println("s = " + s);
            //{"flag":true,"resultData":{"id":101,"name":"暗卷","gender":0,"salary":50000.0}}
            //需要将s返回
            response.getWriter().write(s);//js那一端，response.data
3. 书城项目第五阶段
    3.1 用户名重复验证
        需求：当用户输入完用户名之后，就会给出响应的提示
        实现步骤：
            ① 注册页面用户名文本框的失去焦点事件
                引入axios框架代码
                <script src="static/script/axios.min.js"></script>
                在格式通过验证之后，咱们需要做用户名唯一性的验证(发送异步请求)
            代码：
                checkUsername:function () {
                          //验证用户名是否符合条件
                          var usernameReg=/^[a-zA-Z0-9]{6,16}$/;
                          if(usernameReg.test(this.username)){
                            //说明符合条件
                            //需要将信息提示改为√
                            //在格式通过验证之后，咱们需要做用户名唯一性的验证(发送异步请求)
                            axios({
                              method:"post",
                              url:"user",
                              params:{
                                flag:"checkUsername",
                                username:this.username
                              }
                            }).then(response=>{
                              if(response.data.flag){
                              this.usernameErrMsg="√"
                              }else{
                              this.usernameErrMsg="用户名重复，请更换";
                            }
                            });
                          }else{
                            this.usernameErrMsg="用户名应为6~16位数组和字母组成"
                            return false;
                          }
                        },
            ② UserServlet创建checkUsername方法
                protected void checkUsername(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                        //1. 接受请求参数
                        String username = request.getParameter("username");
                        //2. 去验证username是否存在
                        User user = userService.checkUsername(username);
                        //3. 处理响应(使用CommonResult工具)
                        CommonResult ok =null;
                        if(user==null){
                            ok=CommonResult.ok();
                        }else{
                            ok=CommonResult.error();
                        }
                        //变为json字符串返回即可
                        String s = new Gson().toJson(ok);
                        System.out.println("s = " + s);
                        response.setContentType("text/html;charset=utf-8");
                        response.getWriter().write(s);
                    }
            需求：当用户名是重复的，注册是不能点击的，不重复是可以正常注册的
            解决方案：
                在Vue的数据模型中创建一个数据模型
                    usernameFlag:false
                在异步请求的回调函数内设置usernameFlag的值
                    then(response=>{
                      if(response.data.flag){
                      this.usernameErrMsg="√";
                      this.usernameFlag=true
                      }else{
                      this.usernameErrMsg="用户名重复，请更换";
                      this.usernameFlag=false;
                    }
                点击注册按钮触发checkAll函数
                    checkAll:function () {
                          this.checkUsername()
                          if(!(this.usernameFlag&this.checkPassword()&this.checkConfirmPassword()&this.checkEmail())){
                            //阻止表单提交
                            event.preventDefault()
                          }
                        }
    3.2 加入购物车
        实现方式：
            cookie内
            session内    √   目的：对ajax和session起到练习的作用
                特点：session对象和客户端关联的，和当前登录人是无关联的(登录和不登录都是可以的)
            数据库内    目前电商的方式(关系型数据库、非关系型数据库->redis)
                和当前登录人有关系的
        把购物车看作一个对象，将购物车的信息都存储在该对象内，再将对象放在session内
        即将分析购物车内都存在什么信息？
            n个购物项(关于书的信息，数量，书的金额都在购物项内)
            总数量
            总金额
        购物项内都存在什么信息？
            书的信息
            数量
            金额
        ① 创建购物项类和购物车类
            public class CartItem {
                private Book book; //书的图片、名字、单价book对象内都存在
                private Integer count; //这本书在购物车中的数量
                private Double amount;  //这本书在购物车中的金额(可以通过运算算出来的book.getPrice()*count)
            }
            public class Cart {
                //n个购物项(Map集合或者List集合)
                private Map<Integer,CartItem> map=new HashMap<>();// 将书的id作为map的key值
                private Integer totalCount;//购物车的总数量(可以通过运算得到)
                private Double totalAmount;//购物车的总金额(可以通过运算得到)
            }
        添加一本书，将书的信息放在CartItem对象内，将CartItem对象放在Cart对象的map集合内
        将Map集合放在session内

        ② CartItem中创建get、set方法和构造器：
            amount是不需要外界传进来，因为可以计算得到！
            public void setCount(Integer count) {
                    this.count = count;
                    //设置数量，将amount算出来
                    this.amount=book.getPrice()*this.count;
                }
            public void setBook(Book book) {
                    this.book = book;
                    //设置图书的时候，计算金额
                    this.amount=this.book.getPrice()*this.count;
                }
            public CartItem(Book book, Integer count) {
                    this.book = book;
                    this.count = count;
                    //有参构造器，计算amount
                    this.amount=book.getPrice()*this.count;
                }
        ③ Cart类，暂时不需要get/set/构造器
        ④ 加入购物车的实现思路
            a. 本浏览器第一次点击加入购物车的按钮(session对象内是没有购物车对象的)
                创建Cart对象(map就创建好了)，将图书的信息封装成CartItem对象，在将CartItem对象
                存储在Cart对象的map集合内，将Cart对象放在session内
            b. 第二次点击不同的书的加入购物车
                从session内获得Cart对象，新建CartItem对象，将书的信息封装到CartItem内，
                将CartItem添加到Cart对象的map集合内
            c. 第二次点击的是相同的书的加入购物车
                从session内获得Cart对象，然后从Cart对象的map集合内，拿到CartItem对象
                对该对象的数量进行++操作
        ⑤ 加入购物车实现步骤：
            搭建Vue和axios的环境：
                <script src="static/script/vue.js"></script>
                <script src="static/script/axios.min.js"></script>
            a. 找到加入购物车的超链接(通过异步的方式去添加)
                绑定了单击事件，并将书的id设置给button按钮的name属性值
                <button @click="addCart" th:name="${book.bookId}">加入购物车</button>
            b. 创建addCart函数，发送异步请求
                addCart:function () {
                            //获得当前点击按钮的name属性值，就相当于获得了当前书的id
                            var id=event.target.name;
                            //alert(id);
                             axios({
                               method:"post",
                               url:"cart",
                               params:{
                                 flag:"addCart",
                                  id:id
                               }
                             }).then(response=>{
                               if(response.data.flag){
                                 alert("添加图书到购物车成功");
                            }
                             });
            c. 就是创建CartServlet,创建addCart方法
                protected void addCart(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                        //处理加入购物车的请求
                        //1. 获得请求参数
                        //获得图书的id值
                        String id = request.getParameter("id");
                        System.out.println("id = " + id);
                        //获得到购物车的对象(到底有没有购物车对象-->去session中获取)
                        HttpSession session = request.getSession();
                        Cart cart = (Cart)session.getAttribute("cart");//这个key值，暂时不能确定
                        if(cart==null){
                            //cart如果是null，说明session中没有Cart对象，新建一个Cart对象
                            cart=new Cart();
                            //新建完后，将对象存储在session中
                            session.setAttribute("cart",cart);
                        }
                        //结论：程序运行到此处，cart就是购物车对象
                        //2. 处理业务(不连数据库，所以没有service)
                        //根据图书的id查到图书的信息
                        Book bookById = bookService.findBookById(id);
                        //应该将图书对象，传递到Cart类中，去判断Map集合中是否有这本书的信息
                        cart.addCart(bookById);
                        //3. 给响应
                        CommonResult ok = CommonResult.ok();
                        String s = new Gson().toJson(ok);
                        System.out.println("s = " + s);//{flag:true}
                        response.getWriter().write(s);
                    }
            d. 在Cart类中新建addCart方法
                public void addCart(Book book){
                        //判断这本书在map集合中是否存在
                        CartItem cartItem = map.get(book.getBookId());
                        if(cartItem==null){
                            //说明这本书之前没添加过，本次是第一次添加，新建CartItem对象，数量设置为1
                            CartItem item=new CartItem(book,1);
                            map.put(book.getBookId(),item);//将CartItem对象添加到map集合内
                        }else{
                            //说明之前添加过，cartItem就是那个购物项的对象，将count进行加1
                            cartItem.setCount(cartItem.getCount()+1);
                        }
                        System.out.println(map);//就是为了查看添加是否成功
                    }
            e. 处理首页，购物车超链接上的红圈(个数)
                将购物车的总数量以响应的方法带到js端，由js将数据显示在红圈内
                Cart类：
                    /**
                         * 计算购物车的书总数量
                         * @return
                         */
                        public Integer getTotalCount(){
                            Collection<CartItem> values = map.values();//得到的是CartItem对象的集合
                            Integer total=0;
                            for (CartItem value : values) {
                                total+=value.getCount();
                            }
                            this.totalCount=total;
                            return totalCount;
                        }
                CartServlet的addCart方法：
                    //3. 给响应
                    //响应内容添加一个总数量(获得总数量)
                    Integer totalCount = cart.getTotalCount();//新增
                    CommonResult ok = CommonResult.ok().setResultData(totalCount);//新增
                    String s = new Gson().toJson(ok);
                    System.out.println("s = " + s);//{flag:true,resultData:3}
                    response.getWriter().write(s);
                index.html的Vue代码
                    new Vue({
                            el:"#app",
                            data:{
                              totalCount:"[[${session.cart==null?0:session.cart.totalCount}]]"//新增
                            },
                            methods:{
                              addCart:function () {
                                //获得当前点击按钮的name属性值，就相当于获得了当前书的id
                                var id=event.target.name;
                                //alert(id);
                                 axios({
                                   method:"post",
                                   url:"cart",
                                   params:{
                                     flag:"addCart",
                                      id:id
                                   }
                                 }).then(response=>{
                                   if(response.data.flag){
                                     alert("添加图书到购物车成功");
                                      this.totalCount=response.data.resultData;//新增
                                }
                                 });
                              }
                            }
                          })
    3.3 购物车的查看(虽然存在页面的跳转，要求也是通过异步实现数据的展示)
        ① 找到购物车的超链接
            设置访问路径为CartServlet，进行页面的跳转
            <a href="cart?flag=toCartPage" class="cart iconfont icon-gouwuche">
              购物车
              <div class="cart-num">{{totalCount}}</div>
            </a>
        ② 在CartServlet中创建toCartPage方法
            protected void toCartPage(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                    //将页面跳转设置到cart.html
                    this.processTemplate("cart/cart",request,response);
                }
        ③ 页面已经跳转至cart.html,需要通过异步请求的操作，进行数据的展示
            n个购物项，总数量，总金额
            a. 在cart.html搭建异步请求的环境
            b. 创建一个函数，准备往后台发送异步请求
                showCart:function () {
                    //往后台发送异步请求
                }
            c. 创建钩子函数，调用showCart函数，目的是让该函数在指定阶段运行
                created:function () {
                    this.showCart();
                  }
        ④ 前端Vue代码：
            new Vue({
                  el:"#app",
                  data:{
                    cartItems:[],
                    totalCount:0,
                    totalAmount:0
                  },
                  methods:{
                    //showCart什么时候被调用？在Vue对象创建后，挂载前执行(钩子函数)
                    showCart:function () {
                      //往后台发送异步请求，拿到数据(必须在本页面渲染之前拿到数据)，展示在网页上
                      //alert("Vue对象创建后执行");
                      axios({
                        method:"post",
                        url:"cart",
                        params:{
                          flag:"showCart",
                        }
                      }).then(response=>{
                        if(response.data.flag){
                            //alert(response.data.resultData[0]);
                            //需要将后台传过来的数据，展示在网页上(vue的方式)
                            this.cartItems=response.data.resultData[0];
                            this.totalCount=response.data.resultData[1];
                            this.totalAmount=response.data.resultData[2];
                        }
                      });
                    }
                  },
                  created:function () {
                    this.showCart();
                  }
                })
        ⑤ 在CartServlet中创建showCart方法
            protected void showCart(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                    //获得到购物车的所有数据，然后响应给js
                    //1. n个购物项   2. 总数量  3. 总金额
                    Cart cart = (Cart)request.getSession().getAttribute("cart");
                    //拿到的是Map集合中所有的value值！为什么不直接将Map集合拿到呢？因为要直接遍历
                    Collection<CartItem> allCartItem = cart.getAllCartItem();
                    Integer totalCount = cart.getTotalCount();
                    Double totalAmount = cart.getTotalAmount();
                    //2. 需要将这些数据变为json字符串，返给js
                    List list=new ArrayList();
                    list.add(allCartItem);
                    list.add(totalCount);
                    list.add(totalAmount);
                    CommonResult commonResult = CommonResult.ok().setResultData(list);
                    String s = new Gson().toJson(commonResult);
                    System.out.println("s = " + s);//该字符串就比较复杂了
                    //{flag:true,resultData:[[{购物项},{购物项},{购物项}],5,500]}
                    //这边需要将数据写回去
                    response.setContentType("text/html;charset=utf-8");
                    response.getWriter().write(s);
                }
        ⑥ 页面的渲染(Vue方式渲染)
            //购物项的列表
            <tr v-for="(cartItem,index) in cartItems">
                          <td>
                            <img :src="cartItem.book.imgPath" alt="" />
                          </td>
                          <td>{{cartItem.book.bookName}}</td>
                          <td>
                            <span class="count">-</span>
                            <input class="count-num" type="text" v-model="cartItem.count" />
                            <span class="count">+</span>
                          </td>
                          <td>{{cartItem.book.price}}</td>
                          <td>{{cartItem.amount}}</td>
                          <td><a href="">删除</a></td>
                        </tr>
            //总件数和总金额
            <div class="footer-right">
                        <div>共<span>{{totalCount}}</span>件商品</div>
                        <div class="total-price">总金额<span>{{totalAmount}}</span>元</div>
                        <a class="pay" href="checkout.html">去结账</a>
                      </div>
    3.4 清空购物车
        ① 找到清空购物车的超链接
            <a href="cart?flag=clearCart" class="clear-cart">清空购物车</a>
        ② 在CartServlet中创建clearCart方法
            protected void clearCart(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                    request.getSession().removeAttribute("cart");
                    //将页面跳转设置到cart.html
                    this.processTemplate("cart/cart",request,response);
                }
    3.5 删除购物项
        ① 找到删除的超链接
            <a href="" @click="deleteCartItem" :name="cartItem.book.bookId">删除</a>
        ② Vue内创建deleteCartItem函数
            deleteCartItem:function () {
                      //发送异步请求删除当前购物项(将图书的id带过去)
                      var id=event.target.name;
                     // alert(id);
                      axios({
                        method:"post",
                        url:"cart",
                        params:{
                          flag:"deleteCartItem",
                          id:id
                        }
                      }).then(response=>{
                        if(response.data.flag){
                        //alert(response.data.resultData[0]);
                        //需要将后台传过来的数据，展示在网页上(vue的方式)
                        this.cartItems=response.data.resultData[0];
                        this.totalCount=response.data.resultData[1];
                        this.totalAmount=response.data.resultData[2];
                      }
                      });
                      event.preventDefault();//阻止控件的默认行为
                    }
        ③ 在CartServlet中创建deleteCartItem方法
            protected void deleteCartItem(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                    //1. 获得请求参数
                    String id = request.getParameter("id");
                    //2. 获得到购物车对象
                    HttpSession session = request.getSession();
                    Cart cart = (Cart)session.getAttribute("cart");
                    //3. 调用cart中的方法删除购物项
                    cart.deleteCartItem(Integer.parseInt(id));
                    //4. 后台的数据删除成功了，前台怎么办？因为是异步请求，前台是不刷新
                    //调用showCart把前台数据刷新一下
                    showCart(request,response);
                }
    3.6 加号
        ① 找到加号的位置
            <td>
                <span class="count">-</span>
                <input class="count-num" type="text" v-model="cartItem.count" :name="cartItem.book.bookId"/>
                <span class="count" @click="addCount">+</span>
              </td>
        ② 在Vue中创建addCount函数
            addCount:function () {
                      //发送异步请求，对当前购物项的数量进行加一的操作(将当前购物项的图书id传过去)
                      var id=event.target.previousElementSibling.name;
                      axios({
                        method:"post",
                        url:"cart",
                        params:{
                          flag:"addCount",
                          id:id
                        }
                      }).then(response=>{
                        if(response.data.flag){
                        //alert(response.data.resultData[0]);
                        //需要将后台传过来的数据，展示在网页上(vue的方式)
                        this.cartItems=response.data.resultData[0];
                        this.totalCount=response.data.resultData[1];
                        this.totalAmount=response.data.resultData[2];
                      }
                      })
                    }
        ③ 在CartServlet中创建addCount方法
            protected void addCount(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                    //1. 获得请求参数
                    String id = request.getParameter("id");
                    //2. 获得购物车对象
                    HttpSession session = request.getSession();
                    Cart cart = (Cart)session.getAttribute("cart");
                    //3. 就是调用cart对象中的方法，对购物项的数量进行加一操作
                    cart.addCount(Integer.parseInt(id));
                    //4. 后台的数据已经刷新完毕，前台的怎么办？
                    showCart(request,response);
                }

    3.7 减号
        ① 找到减号的位置
            <td>
                <span class="count" @click="subtractCount">-</span>
                <input class="count-num" type="text" v-model="cartItem.count" :name="cartItem.book.bookId"/>
                <span class="count" @click="addCount">+</span>
              </td>
        ② 在Vue中创建subtractCount函数
            subtractCount:function () {
                      //需要获得当前购物项的id
                      //当目前购物项的数量为1的话，执行的删除操作，不为1才是减一操作
                      //1. 获得到文本框的value属性值
                      var count=event.target.nextElementSibling.value;
                      var id=event.target.nextElementSibling.name;
                      if(count==1){
                        //问一下，确定要删除吗？
                        if(confirm("确定要删除吗？")){
                          //执行删除操作(在发送一个请求删除)
                          axios({
                            method:"post",
                            url:"cart",
                            params:{
                              flag:"deleteCartItem",
                              id:id
                            }
                          }).then(response=>{
                            if(response.data.flag){
                            //alert(response.data.resultData[0]);
                            //需要将后台传过来的数据，展示在网页上(vue的方式)
                            this.cartItems=response.data.resultData[0];
                            this.totalCount=response.data.resultData[1];
                            this.totalAmount=response.data.resultData[2];
                          }
                          })
                        }
                      }else{//说明count不为1，肯定大于1
                        axios({
                          method:"post",
                          url:"cart",
                          params:{
                            flag:"subtractCount",
                            id:id
                          }
                        }).then(response=>{
                          if(response.data.flag){
                          //alert(response.data.resultData[0]);
                          //需要将后台传过来的数据，展示在网页上(vue的方式)
                          this.cartItems=response.data.resultData[0];
                          this.totalCount=response.data.resultData[1];
                          this.totalAmount=response.data.resultData[2];
                        }
                      })
                      }

                    }
        ③ 在CartServlet中创建subtractCount函数
            protected void subtractCount(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                    //1. 获得请求参数
                    String id = request.getParameter("id");
                    //2. 获得购物车对象
                    HttpSession session = request.getSession();
                    Cart cart = (Cart)session.getAttribute("cart");
                    //3. 就是调用cart对象中的方法，对购物项的数量进行减一操作
                    cart.subtractCount(Integer.parseInt(id));
                    //4. 后台的数据已经刷新完毕，前台的怎么办？
                    showCart(request,response);
                }

    3.8 修改购物项的数量
        ① 找到文本框
            <td>
                <span class="count" @click="subtractCount">-</span>
                <input class="count-num" type="text" v-model="cartItem.count" @change="changeCount" :name="cartItem.book.bookId"/>
                <span class="count" @click="addCount">+</span>
              </td>
        ② 在Vue中创建changeCount函数
            changeCount:function () {
                        //需要将当前购物项的图书id取到，还需要将用户修改后的数量取到
                      var id=event.target.name;
                      var newCount=event.target.value;//做一个正则验证：必须是大于0的整数
                      //alert(id+"   "+newCount);
                      axios({
                        method:"post",
                        url:"cart",
                        params:{
                          flag:"changeCount",
                          id:id,
                          newCount:newCount
                        }
                      }).then(response=>{
                        if(response.data.flag){
                        //alert(response.data.resultData[0]);
                        //需要将后台传过来的数据，展示在网页上(vue的方式)
                        this.cartItems=response.data.resultData[0];
                        this.totalCount=response.data.resultData[1];
                        this.totalAmount=response.data.resultData[2];
                      }
                      })
                    }
        ③ 在CartServlet中创建changeCount方法
            protected void changeCount(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                    //1. 获得请求参数
                    String id = request.getParameter("id");
                    String newCount = request.getParameter("newCount");
                    //2. 获得购物车对象
                    HttpSession session = request.getSession();
                    Cart cart = (Cart)session.getAttribute("cart");
                    //3. 就是调用cart对象中的方法，对购物项的数量进行修改操作
                    cart.changeCount(Integer.parseInt(id),Integer.parseInt(newCount));
                    //4. 后台的数据已经刷新完毕，前台的怎么办？
                    showCart(request,response);
                }
    3.9 处理金额的精度问题
        ① 购物项的金额
            三个位置计算amount都需要处理
                BigDecimal price=new BigDecimal(this.book.getPrice()+"");//使用字符串的构造器
                BigDecimal count1=new BigDecimal(this.count+"");
                this.amount=price.multiply(count1).doubleValue();
        ② 购物车的总金额
            public Double getTotalAmount(){
                    Collection<CartItem> values = map.values();//得到的是CartItem对象的集合
                    BigDecimal total=new BigDecimal("0");
                    for (CartItem value : values) {
                        BigDecimal amount=new BigDecimal(value.getAmount()+"");
                        //将amount累加到total上
                        total=total.add(amount);
                    }
                    this.totalAmount=total.doubleValue();
                    return totalAmount;
                }
        晚自习问问题：
            ① 出现问题，找错误信息！将所有错误信息都发给老师，相关代码信息都发给老师
            ② 问完之后，可以先去学其他的知识点












